name: Deploy to Google Cloud

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build frontend
      run: |
        # 檢查是否有前端建構腳本
        if [ -f "package.json" ] && grep -q "vite" package.json; then
          npm run build
        else
          echo "No frontend build script found, creating placeholder"
          mkdir -p dist
          echo "<html><body><h1>AI Task Dispatch Center</h1><p>Frontend not configured</p></body></html>" > dist/index.html
        fi
        ls -la dist/
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Deploy to Cloud Run (Direct)
      run: |
        gcloud run deploy ai-dispatch-backend \
          --source ./backend \
          --platform managed \
          --region asia-east1 \
          --allow-unauthenticated \
          --memory 4Gi \
          --cpu 2 \
          --timeout 3600 \
          --max-instances 10 \
          --service-account=ai-dispatch-service@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com \
          --set-env-vars "NODE_ENV=production,FIRESTORE_COLLECTION=tasks,GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }},GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},GOOGLE_SHEET_ID=${{ secrets.GOOGLE_SHEET_ID }},GMAIL_USER=${{ secrets.GMAIL_USER }},GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}"
          
    - name: Deploy frontend to Cloud Storage
      run: |
        BUCKET_NAME="ai-dispatch-frontend-$(date +%s)"
        echo "Using bucket name: $BUCKET_NAME"
        
        # 創建儲存桶
        gsutil mb gs://$BUCKET_NAME/ || echo "Bucket may already exist"
        
        # 等待儲存桶創建完成
        sleep 15
        
        # 設定網站配置
        gsutil web set -m index.html -e 404.html gs://$BUCKET_NAME/
        
        # 創建完整的前端界面
        echo "Creating complete frontend interface"
        mkdir -p dist
        
        # 創建完整的前端 HTML 檔案
        cat > dist/index.html << 'HTML_EOF'
        <!DOCTYPE html>
        <html lang="zh-TW">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>AI 任務派遣中心</title>
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }
                .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 20px; box-shadow: 0 20px 40px rgba(0,0,0,0.1); overflow: hidden; }
                .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }
                .header h1 { font-size: 2.5em; margin-bottom: 10px; }
                .header p { font-size: 1.2em; opacity: 0.9; }
                .main-content { padding: 40px; }
                .input-section { background: #f8f9fa; border-radius: 15px; padding: 30px; margin-bottom: 30px; }
                .input-section h2 { color: #333; margin-bottom: 20px; font-size: 1.5em; }
                .form-group { margin-bottom: 20px; }
                .form-group label { display: block; margin-bottom: 8px; font-weight: 600; color: #555; }
                .form-group input, .form-group textarea { width: 100%; padding: 12px; border: 2px solid #e1e5e9; border-radius: 8px; font-size: 16px; transition: border-color 0.3s; }
                .form-group input:focus, .form-group textarea:focus { outline: none; border-color: #667eea; }
                .form-group textarea { height: 120px; resize: vertical; }
                .btn { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; padding: 15px 30px; border-radius: 8px; font-size: 16px; font-weight: 600; cursor: pointer; transition: transform 0.2s; width: 100%; }
                .btn:hover { transform: translateY(-2px); }
                .audio-section { background: #fff3cd; border: 2px solid #ffeaa7; border-radius: 15px; padding: 30px; margin-bottom: 30px; }
                .audio-section h2 { color: #856404; margin-bottom: 20px; }
                .audio-controls { display: flex; gap: 15px; align-items: center; flex-wrap: wrap; }
                .audio-btn { background: #ff6b6b; color: white; border: none; padding: 12px 24px; border-radius: 8px; font-size: 16px; cursor: pointer; transition: all 0.3s; }
                .audio-btn:hover { background: #ff5252; transform: translateY(-2px); }
                .status { padding: 15px; border-radius: 8px; margin: 20px 0; font-weight: 600; }
                .status.success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
                .status.error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
                .status.info { background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }
                .tasks-section { background: #f8f9fa; border-radius: 15px; padding: 30px; margin-top: 30px; }
                .tasks-section h2 { color: #333; margin-bottom: 20px; }
                .task-item { background: white; border: 1px solid #e1e5e9; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .task-title { font-weight: 600; color: #333; margin-bottom: 8px; }
                .task-description { color: #666; margin-bottom: 10px; }
                .task-meta { display: flex; gap: 15px; font-size: 14px; color: #888; }
                @media (max-width: 768px) { .container { margin: 10px; border-radius: 15px; } .header { padding: 20px; } .header h1 { font-size: 2em; } .main-content { padding: 20px; } .audio-controls { flex-direction: column; align-items: stretch; } }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>🤖 AI 任務派遣中心</h1>
                    <p>智慧型任務分析、自動指派與多平台通知系統</p>
                </div>
                <div class="main-content">
                    <div class="audio-section">
                        <h2>🎤 音訊轉文字</h2>
                        <div class="audio-controls">
                            <button id="recordBtn" class="audio-btn">開始錄音</button>
                            <button id="stopBtn" class="audio-btn" disabled>停止錄音</button>
                            <button id="uploadBtn" class="audio-btn" disabled>上傳轉錄</button>
                            <span id="recordingStatus">準備錄音</span>
                        </div>
                        <div id="audioStatus"></div>
                    </div>
                    <div class="input-section">
                        <h2>📝 輸入任務資訊</h2>
                        <form id="taskForm">
                            <div class="form-group">
                                <label for="taskText">主要內容</label>
                                <textarea id="taskText" placeholder="請輸入任務相關的文字內容..."></textarea>
                            </div>
                            <div class="form-group">
                                <label for="taskUrl">重要連結</label>
                                <input type="url" id="taskUrl" placeholder="https://example.com">
                            </div>
                            <div class="form-group">
                                <label for="taskFile">檔案上傳</label>
                                <input type="file" id="taskFile" multiple style="width: 100%; padding: 12px; border: 2px solid #e1e5e9; border-radius: 8px;">
                            </div>
                            <div class="form-group">
                                <label for="manualTask">手動輸入單一任務</label>
                                <input type="text" id="manualTask" placeholder="直接輸入一個具體任務...">
                            </div>
                            <button type="submit" class="btn">🚀 開始分析任務</button>
                        </form>
                    </div>
                    <div id="statusContainer"></div>
                    <div class="tasks-section">
                        <h2>📋 任務列表</h2>
                        <div id="tasksContainer">
                            <div style="text-align: center; padding: 40px; color: #666;">
                                <p>等待任務輸入...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <script>
                const API_BASE_URL = 'https://ai-dispatch-backend-4p2jidtc3q-de.a.run.app';
                let mediaRecorder, audioChunks = [], isRecording = false;
                const recordBtn = document.getElementById('recordBtn');
                const stopBtn = document.getElementById('stopBtn');
                const uploadBtn = document.getElementById('uploadBtn');
                const recordingStatus = document.getElementById('recordingStatus');
                recordBtn.addEventListener('click', startRecording);
                stopBtn.addEventListener('click', stopRecording);
                uploadBtn.addEventListener('click', uploadAudio);
                async function startRecording() {
                    try {
                        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                        mediaRecorder = new MediaRecorder(stream);
                        audioChunks = [];
                        mediaRecorder.ondataavailable = (event) => { audioChunks.push(event.data); };
                        mediaRecorder.onstop = () => {
                            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                            window.audioBlob = audioBlob;
                            uploadBtn.disabled = false;
                            recordingStatus.textContent = '錄音完成，可以上傳轉錄';
                        };
                        mediaRecorder.start();
                        isRecording = true;
                        recordBtn.disabled = true;
                        stopBtn.disabled = false;
                        recordBtn.style.background = '#ff4757';
                        recordingStatus.textContent = '正在錄音...';
                    } catch (error) {
                        showStatus('無法訪問麥克風：' + error.message, 'error');
                    }
                }
                function stopRecording() {
                    if (mediaRecorder && isRecording) {
                        mediaRecorder.stop();
                        isRecording = false;
                        recordBtn.disabled = false;
                        stopBtn.disabled = true;
                        recordBtn.style.background = '#ff6b6b';
                    }
                }
                async function uploadAudio() {
                    if (!window.audioBlob) {
                        showStatus('請先錄音', 'error');
                        return;
                    }
                    try {
                        showStatus('正在轉錄音訊...', 'info');
                        const formData = new FormData();
                        formData.append('audio', window.audioBlob, 'recording.wav');
                        formData.append('mimeType', 'audio/wav');
                        formData.append('languageCode', 'zh-TW');
                        const response = await fetch(`${API_BASE_URL}/api/transcribe`, {
                            method: 'POST',
                            body: formData
                        });
                        const result = await response.json();
                        if (result.success) {
                            showStatus('音訊轉錄成功！', 'success');
                            document.getElementById('taskText').value = result.transcription;
                        } else {
                            showStatus('轉錄失敗：' + result.message, 'error');
                        }
                    } catch (error) {
                        showStatus('轉錄錯誤：' + error.message, 'error');
                    }
                }
                const taskForm = document.getElementById('taskForm');
                taskForm.addEventListener('submit', handleTaskSubmit);
                async function handleTaskSubmit(e) {
                    e.preventDefault();
                    const taskText = document.getElementById('taskText').value;
                    const taskUrl = document.getElementById('taskUrl').value;
                    const taskFile = document.getElementById('taskFile').files;
                    const manualTask = document.getElementById('manualTask').value;
                    if (!taskText && !taskUrl && taskFile.length === 0 && !manualTask) {
                        showStatus('請至少輸入一項任務資訊', 'error');
                        return;
                    }
                    try {
                        showStatus('正在分析任務...', 'info');
                        setTimeout(() => {
                            const mockTasks = [{
                                title: '分析任務內容',
                                description: taskText || manualTask || '從音訊轉錄的內容',
                                priority: '高',
                                status: '待處理',
                                category: '分析',
                                assignee: 'AI 系統',
                                dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
                            }];
                            displayTasks(mockTasks);
                            showStatus('任務分析完成！', 'success');
                        }, 2000);
                    } catch (error) {
                        showStatus('分析錯誤：' + error.message, 'error');
                    }
                }
                function displayTasks(tasks) {
                    const container = document.getElementById('tasksContainer');
                    if (tasks.length === 0) {
                        container.innerHTML = '<div style="text-align: center; padding: 40px; color: #666;"><p>暫無任務</p></div>';
                        return;
                    }
                    container.innerHTML = tasks.map(task => `
                        <div class="task-item">
                            <div class="task-title">${task.title}</div>
                            <div class="task-description">${task.description}</div>
                            <div class="task-meta">
                                <span>優先級: ${task.priority}</span>
                                <span>狀態: ${task.status}</span>
                                <span>類別: ${task.category}</span>
                                <span>負責人: ${task.assignee}</span>
                                <span>截止日期: ${task.dueDate}</span>
                            </div>
                        </div>
                    `).join('');
                }
                function showStatus(message, type) {
                    const statusContainer = document.getElementById('statusContainer');
                    statusContainer.innerHTML = `<div class="status ${type}">${message}</div>`;
                    setTimeout(() => { statusContainer.innerHTML = ''; }, 5000);
                }
                displayTasks([]);
            </script>
        </body>
        </html>
        HTML_EOF
        
        # 上傳前端檔案
        gsutil -m cp -r ./dist/* gs://$BUCKET_NAME/
        
        # 設定公開存取權限
        gsutil iam ch allUsers:objectViewer gs://$BUCKET_NAME/
        
        # 驗證部署
        gsutil ls gs://$BUCKET_NAME/
        
        # 輸出儲存桶名稱供後續使用
        echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
        
    - name: Get deployment URLs
      run: |
        BACKEND_URL=$(gcloud run services describe ai-dispatch-backend --platform managed --region asia-east1 --format 'value(status.url)')
        FRONTEND_URL="https://storage.googleapis.com/$BUCKET_NAME/index.html"
        echo "Backend URL: $BACKEND_URL"
        echo "Frontend URL: $FRONTEND_URL"
        echo "Backend Health Check: $BACKEND_URL/health"
        echo "Backend API Info: $BACKEND_URL/"
